#!/bin/sh -f

#
# bkm - bookmark manager
#

log() {
    printf '%s\n' "$@"
}

die() {
    log "$1"
    exit 1
}

nest() {
    log "├─ $1" \
        "│  $2"
}

mesg() {
    log "$1" "$2"
    nest "$3" "$4"
}

truncate() {
    set +f
    # shellcheck disable=2048,2086
    set -f -- $*

    printf '%s\n' "$*"
}

trim() {
    printf '%s\n' "$1" | sed -e "s/ //g"
}

sanitize() {
    str=$1
    str=$(truncate "$str")
    str=$(trim "$str")

    printf '%s\n' "$str"
}

read_input() {
    old=$1

    read -r "new"

    if [ -n "$new" ] && [ "$new" != "$old" ]; then
        new=$(sanitize "$new")
        printf '%s\n' "$new"
    else
        printf '%s\n' "$old"
    fi

    unset old
    unset new
}

value_or_die() {
    [ -n "$1" ] || {
        die "Argument $2 is required."
    }
}

url_or_die() {
    printf '%s' "${1:-""}" | grep -q -e "http://" -e "https://" -e "www." || {
        die "URL is required and must have valid format."
    }
}

file_or_die() {
    [ -f "$1" ] || die "Category ${1##*/} not found."
}

list_tree() {
    file_or_die "$1"

    log "${1##*/}"

    while IFS=' ' read -r n u; do
        nest "$n" "$u"
    done < "$1"
}

check_duplicate() {
    if [ -f "$current" ]; then
        seen=0
        xname=""
        xurl=""

        while IFS=' ' read -r n u; do

            [ "$name" = "$n" ] && {
                seen=1
                xname="$n"
                xurl="$u"
            }

            [ "$url" = "$u" ] && {
                mesg "Duplicate URL found in category." "$category" "$n" "$u"
                exit
            }
        done < "$current"

        [ $seen -eq 1 ] && {
            mesg "Duplicate name found in category." "$category" "$xname" "$xurl"

            printf '\nEnter another name (or press Ctrl+C to abort): '

            prev=$name
            name=$(read_input "$prev")

            check_duplicate
        }

    else
        :> "$current"
    fi
}

add_bookmark() {
    value_or_die "$category" "category"
    value_or_die "$name" "name"
    url_or_die "$url"

    check_duplicate

    printf '%s %s\n' "$name" "$url" >> "$current" || {
        die "Failed to write bookmark to file ${current##*/}."
    }

    mesg "Bookmark saved." "$category" "$name" "$url"
}

edit_bookmark() {
    printf 'TODO\n'
}

open_bookmark() {
    [ -z "$BROWSER" ] && die "BROWSER is not set."

    value_or_die "$category" "category"
    value_or_die "$name" "name"
    file_or_die "$current"

    while IFS=' ' read -r n u; do
        [ "$name" = "$n" ] && {
            command "$BROWSER" "$u" > /dev/null
            exit
        }

        continue
    done < "$current"

    die "Bookmark $name not found in category."
}

list_bookmark() {
    if [ -n "$category" ]; then
        list_tree "$bookmark_dir/$category"
    else
        set +f
        set -f -- "$bookmark_dir/"*

        for c in "$@"; do
            [ -f "$c" ] || {
                log "No bookmarks found"
                continue
            }

            list_tree "$c"
        done
    fi
}

delete_bookmark() {
    printf 'TODO\n'
}

push_bookmark() {
    printf 'TODO\n'
}

help() {
    log "bkm is a simple bookmark manager that uses plain text files to" \
        "store bookmarks under categories in a user-specified directory." \
        "The directory is defined by BKM_DIR in \$SHELL's startup file." "" \
        "Usage: bkm [options]..." "" \
        "add category.name url" \
        "    Add a new bookmark" \
        "    EXAMPLE: add \"archlinux.news\" \"https://www.archlinux.org/news/\"" "" \
        "edit category.name" \
        "    Edit a bookmark" \
        "    EXAMPLE: edit \"archlinux.news\"" "" \
        "open category.name" \
        "    Open bookmark in \$BROWSER" \
        "    EXAMPLE: open \"archlinux.news\"" "" \
        "list -c <category>" \
        "    List all bookmarks in a category" \
        "    EXAMPLE: list \"archlinux\"" "" \
        "list" \
        "    List all bookmarks in each category" "" \
        "delete category.name" \
        "    Delete a bookmark in a category" \
        "    EXAMPLE: delete \"archlinux.news\"" "" \
        "delete category" \
        "    Delete category and all its bookmarks" \
        "    EXAMPLE: delete \"archlinux\"" "" \
        "push" \
        "    Stage, commit and push bookmarks to remote git repository" \
        "    NOTE: This presumes that \$BKM_DIR is a git repository." ""
    exit
}

main() {
    [ -z "$BKM_DIR" ] && die "BKM_DIR is not set."

    bookmark_dir="${BKM_DIR%%/}/bkm"
    mkdir -p "$bookmark_dir"

    action="$1"
    category=$(sanitize "${2%%.*}")
    name=$(sanitize "${2##*.}")
    url=$(sanitize "$3")
    current="$bookmark_dir/$category"

    case $action in
        add) add_bookmark ;;
        edit) edit_bookmark ;;
        open) open_bookmark ;;
        list) list_bookmark ;;
        delete) delete_bookmark ;;
        push) push_bookmark ;;
        *) help ;;
    esac
}

main "$@"
