#!/bin/sh -f

#
# bkm - bookmark manager
#

log() {
    printf '%s\n' "$@"
}

die() {
    log "$1"
    exit 1
}

msg() {
    printf '%s\n%s\n%s\n%s\n' "$1" \
        "category: $2" \
        "    name: $3" \
        "     url: $4"
}

read_input() {
    old=$1

    read -r "new"

    if [ -n "$new" ] && [ "$new" != "$old" ]; then
        new=$(sanitize "$new")
        printf '%s\n' "$new"
    else
        printf '%s\n' "$old"
    fi

    unset old
    unset new
}

is_url() {
    printf '%s' "$1" | grep -q -e "http://" -e "https://" -e "www." && {
        return 0
    }

    return 1
}

has_value() {
    [ -z "$1" ] && die "Argument $2 is required"
}

truncate() {
    set +f
    # shellcheck disable=2048,2086
    set -f -- $*

    printf '%s\n' "$*"
}

trim() {
    printf '%s\n' "$1" | sed -e "s/ //g"
}

sanitize() {
    str=$1

    str=$(truncate "$str")
    str=$(trim "$str")

    printf '%s\n' "$str"
}

handle_existing() {
    if [ -f "$current" ]; then
        seen=0
        xname=""
        xurl=""

        while IFS=' ' read -r n u; do

            [ "$name" = "$n" ] && {
                seen=1
                xname="$n"
                xurl="$u"
            }

            [ "$url" = "$u" ] && {
                msg "URL ALREADY EXISTS IN CATEGORY" "$category" "$n" "$u"
                exit
            }
        done < "$current"

        [ $seen -eq 1 ] && {
            msg "NAME ALREADY EXISTS IN CATEGORY" "$category" "$xname" "$xurl"

            printf '\nEnter new name to save (or press Ctrl+C to abort): '

            prev=$name
            name=$(read_input "$prev")
            handle_existing
        }

    else
        :> "$current"
    fi
}

add_bookmark() {
    has_value "$name" "-n <name>"
    has_value "$url" "-u <url>"

    is_url "$url" || die "Argument -u <url> arg must be a valid url"

    handle_existing

    printf '%s %s\n' "$name" "$url" >> "$current" || {
        die "Failed to write bookmark to $current"
    }

    msg "BOOKMARK ADDED" "$category" "$name" "$url"
}

edit_bookmark() {
    printf 'TODO\n'
}

open_bookmark() {
    printf 'TODO\n'
}

treelog() {
    [ -f "$1" ] || die "Category ${1##*/} does not exist"

    log "${1##*/}"

    while IFS=' ' read -r n u; do
        log "├─ $n" \
            "│  $u"
    done < "$1"
}

list_bookmark() {
    if [ -n "$category" ]; then
        treelog "$BKM_DIR/$category"
    else
        set +f
        set -f -- "$BKM_DIR/"*

        for c in "$@"; do
            [ -f "$c" ] || {
                log "No bookmarks found"
                continue
            }

            treelog "$c"
        done
    fi
}

delete_bookmark() {
    printf 'TODO\n'
}

help() {

    log "bkm is a simple bookmark manager that uses plain text files to" \
        "store bookmarks under categories in a user-specified directory." \
        "The directory is defined by BKM_DIR in \$SHELL's startup file." "" \
        "Usage: bkm [action] [args]" \
        "Actions:" "" \
        "add -c <category> -n <name> -u <url>" \
        "    Add a new bookmark" "" \
        "edit -c <category> -n <name>" \
        "    Edit a bookmark" "" \
        "open -c <category> -n <name>" \
        "    Open bookmark in \$BROWSER" "" \
        "list -c <category>" \
        "    List all bookmarks in a category" "" \
        "list" \
        "    List all bookmarks by category" "" \
        "delete -c <category> -n <name>" \
        "    Delete a bookmark in a category" "" \
        "delete -c <category>" \
        "    Delete category and all its bookmarks" ""

    exit
}

args() {
    while getopts :c:n:u: opt;
        do case $opt in
            c) category=$(sanitize "$OPTARG") ;;
            n) name=$(sanitize "$OPTARG") ;;
            u) url=$(sanitize "$OPTARG") ;; # just to be safe as typos do occur.
            \?) help ;;
            :) printf 'Option -%s requires an argument\n' "$OPTARG" >&2; exit 1 ;;
            *) printf 'Option -%s does not exist\n' "$OPTARG" >&2; exit 1 ;;
        esac;
    done
}

main() {
    [ -z "$BKM_DIR" ] && die "BKM_DIR is not set"

    mkdir -p "$BKM_DIR"

    action="$1"

    [ "$#" -ge 1 ] && shift

    args "$@"

    case $action in
        add) add=1 ;;
        edit) edit=1 ;;
        open) open=1 ;;
        list) list=1 ;;
        delete) delete=1 ;;
        *) help ;;
    esac

    [ -z "$list" ] && [ -z "$category" ] && die "Arg -c <category> is required"

    current="$BKM_DIR/$category"

    #
    # using a massive if statement is perhaps
    # not the prettiest solution, but it'll do
    # for now.
    #
    if [ -n "$add" ]; then
        add_bookmark
    elif [ -n "$edit" ]; then
        edit_bookmark
    elif [ -n "$open" ]; then
        open_bookmark
    elif [ -n "$list" ]; then
        list_bookmark
    elif [ -n "$delete" ]; then
        delete_bookmark
    else
        help
    fi
}

main "$@"
