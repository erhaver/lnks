#!/bin/sh -f

#
# bkm - bookmark manager
#

log() {
    printf '%s\n' "$@"
}

die() {
    log "$1"
    exit 1
}

nest() {
    log "  • $1"
}

msg() {
    log "$1" "$2" "  • $3 ─ $4"
}

truncate() {
    set +f
    # shellcheck disable=2048,2086
    set -f -- $*

    printf '%s\n' "$*"
}

trim() {
    printf '%s\n' "$1" | sed "s/ //g"
}

sanitize() {
    str=$1
    str=$(truncate "$str")
    str=$(trim "$str")

    printf '%s\n' "$str"
}

read_input() {
    old=$1

    read -r new

    if [ -n "$new" ] && [ "$new" != "$old" ]; then
        new=$(sanitize "$new")
        printf '%s\n' "$new"
    else
        printf '%s\n' "$old"
    fi
}

is_url() {
    printf '%s\n' "$1" | grep -q -e "http://" -e "https://" -e "www." && {
        return 0
    }

    return 1
}

url_or_die() {
    is_url "${1:-""}" || die "URL is required and must have valid format."
}

value_or_die() {
    [ -n "$1" ] || die "Argument '$2' is required."
}

name_and_category_or_die() {
    value_or_die "$category" "category"
    value_or_die "$name" "name"
}

file_or_die() {
    [ -f "$1" ] || die "Category ${1##*/} not found."
}

list_tree() {
    file_or_die "$1"

    log "${1##*/}"

    while IFS=' ' read -r n _; do
        nest "$n"
    done < "$1"
}

value_exists() {
    match_against="$1"
    skip_index="$2"

    seen=0

    while IFS=' ' read -r n u; do
        i=$((i+1))

        [ "$match_against" = "name" ] && \
        [ "$name" = "$n" ] && \
        [ "$skip_index" != "$i" ] && {
            seen=1
            existing_name="$n"
            existing_url="$u"

            break
        }

        [ "$match_against" = "url" ] && \
        [ "$url" = "$u" ] && \
        [ "$skip_index" != "$i" ] && {
            seen=1
            existing_name="$n"
            existing_url="$u"

            break
        }

        [ $seen -eq 1 ]
    done < "$current"

    unset i

    [ $seen -eq 1 ] && return 0

    return 1
}

resolve_duplicates() {
    [ -f "$current" ] || {
        :> "$current"
        return
    }

    value_exists "name" "$index" && {
        msg "Duplicate name found in category:" \
            "$category" "$existing_name" "$existing_url"

        printf 'Enter another name (or type Ctrl+C to abort): '
        new_name=$(read_input "$existing_name")

        [ -n "$new_name" ] && name="$new_name"

        resolve_duplicates

        #
        # If we don't return, the url-duplicate check
        # will run twice since the function did not get
        # to finish before it invoked itself again in
        # the line above.
        #
        return
    }

    value_exists "url" "$index" && {
        msg "Duplicate URL found in category:" \
            "$category" "$existing_name" "$existing_url"

        printf 'Continue anyway? [y/n]: '
        answer=$(read_input "")

        case $answer in
            'y'*|'Y'*) ;;
            *) die "Quitting." ;;
        esac

        unset answer
    }
}

remove_line_by_index() {
    sed -i "${1}d" "$current"
}

remove_empty_lines() {
    sed -i "/^$/d" "$current"
}

remove_empty_categories() {
    set +f
    set -f -- "$bookmark_dir/"*

    for file in "$@"; do
        [ -s "$file" ] || rm -f "$file"
    done
}

delete_entry() {
    while IFS=' ' read -r n u; do
        i=$((i+1))

        [ "$name" = "$n" ] && {
            url="$u"
            index="$i"
        }

        continue
    done < "$current"

    unset i

    [ -z "$index" ] && die "Bookmark $name not found in category $category."

    msg "Found bookmark:" \
        "$category" "$name" "$url"

    printf 'Delete it? [y/n]: '
    answer=$(read_input "")

    case $answer in
        'y'*|'Y'*) ;;
        *) die "Quitting." ;;
    esac

    unset answer

    remove_line_by_index "$index"
    remove_empty_lines
    remove_empty_categories

    log "Bookmark deleted."
}

write_to_file() {
    printf '%s %s\n' "$name" "$url" >> "$current" || {
        die "Failed to write bookmark to file ${current##*/}."
    }
}

bkm_add() {
    name_and_category_or_die
    url_or_die "$url"

    resolve_duplicates

    write_to_file

    msg "Bookmark saved:" \
        "$category" "$name" "$url"
}

bkm_edit() {
    name_and_category_or_die
    file_or_die "$current"

    while IFS=' ' read -r n u; do
        i=$((i+1))

        [ "$name" = "$n" ] && {
            url="$u"
            index="$i"
        }

        continue
    done < "$current"

    unset i

    [ -z "$index" ] && die "Bookmark $name not found in category $category."

    msg "Editing bookmark:" "$category" "$name" "$url"

    printf 'Edit name (or press Enter to leave unchanged): '
    name=$(read_input "$name")

    printf 'Edit URL (or press Enter to leave unchanged): '
    url=$(read_input "$url")

    resolve_duplicates

    remove_line_by_index "$index"
    remove_empty_lines
    write_to_file

    msg "Bookmark saved:" "$category" "$name" "$url"
}

bkm_open() {
    [ -z "$BROWSER" ] && die "BROWSER is not set."

    name_and_category_or_die
    file_or_die "$current"

    while IFS=' ' read -r n u; do
        [ "$name" = "$n" ] && {
            if [ -n "$u" ] && is_url "$u"; then
                command "$BROWSER" "$u" > /dev/null 2>&1 &
                exit
            else
                die "Bookmark $name has an invalid or missing URL."
            fi
        }

        continue
    done < "$current"

    die "Bookmark $name not found in category."
}

bkm_list() {
    if [ -n "$category" ]; then
        list_tree "$bookmark_dir/$category"
    else
        set +f
        set -f -- "$bookmark_dir/"*

        for c in "$@"; do
            [ -f "$c" ] || {
                log "No bookmarks found"
                continue
            }

            list_tree "$c"
        done
    fi
}

bkm_show() {
    name_and_category_or_die
    file_or_die "$current"

    while IFS=' ' read -r n u; do
        [ "$name" = "$n" ] && {
            if [ -n "$u" ] && is_url "$u"; then
                msg "Bookmark details:" \
                    "$category" "$name" "$u"
                exit
            else
                die "Bookmark $name has an invalid or missing URL."
            fi
        }

        continue
    done < "$current"

    die "Bookmark $name not found in category."
}

bkm_categories() {
    set +f
    set -f -- "$bookmark_dir/"*

    for c in "$@"; do
        log "${c##*/}"
    done
}

bkm_delete() {
    value_or_die "$category" "category"
    file_or_die "$current"

    if [ -n "$name" ]; then
        delete_entry
    else
        printf 'Delete category %s? [y/n]: ' "$category"
        answer=$(read_input "")

        case $answer in
            'y'*|'Y'*) ;;
            *) die "Quitting." ;;
        esac

        unset answer

        rm -f "$current"
        log "Category deleted."
    fi
}

usage() {
printf %s "\
bkm - bookmark manager.

a|add [category].[name] [url]  - Add bookmark.
e|edit [category].[name]       - Edit bookmark.
o|open [category].[name]       - Open bookmark in \$BROWSER.
s|show [category].[name]       - Show bookmark details.
l|list                         - List all bookmarks.
l|list [category]              - List bookmarks in category.
c|categories                   - List categories.
d|delete [category].[name]     - Delete bookmark from category.
d|delete [category]            - Delete entire category.

Define bookmarks directory:      export BKM_DIR=~/.bookmarks
"
exit
}

main() {
    [ -z "$BKM_DIR" ] && die "\$BKM_DIR is not set."

    bookmark_dir="${BKM_DIR%%/}/bkm"
    mkdir -p "$bookmark_dir"

    dotnot=$2
    printf '%s\n' "$dotnot" | grep -q -e "\." || {
        dotnot="$dotnot."
    }

    action=$1
    category=$(sanitize "${dotnot%%.*}")
    name=$(sanitize "${dotnot##*.}")
    url=$(sanitize "$3")
    current="$bookmark_dir/$category"

    index=
    existing_name=
    existing_url=

    case $action in
        a|add) bkm_add ;;
        e|edit) bkm_edit ;;
        o|open) bkm_open ;;
        l|list) bkm_list ;;
        s|show) bkm_show ;;
        c|categories) bkm_categories ;;
        d|delete) bkm_delete ;;
        *) usage ;;
    esac
}

main "$@"
